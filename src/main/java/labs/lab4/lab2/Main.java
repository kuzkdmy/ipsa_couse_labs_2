package labs.lab4.lab2;

import java.math.BigDecimal;

import static labs.lab4.lab2.ItemLocation.IN_SELLING_ROOM;
import static labs.lab4.lab2.ItemShippingCondition.DO_NOT_CANT;

// Відповідно варіанту до тексту програми третього комп’ютерного практикуму
//потрібно внести наступні зміни:
//- перевантажити оператор індексації для новоствореного класу відповідно
//варіанту;
//- перевірку коректності за бажанням можна реалізувати без генерування
//виключних ситуацій;
//- визначити оператор перетворення типу для класу відповідно варіанту;
//- функцію, що виводить деяку скорочену інформацію про об’єкт,
//визначити як віртуальну.
//Тестовий приклад продумати так, щоб продемонструвати об’єкт нового
//класу та роботу усіх новостворених функцій.
//Демонстрацію роботи кожної з віртуальних функцій потрібно організувати
//так, щоб очевидно був задіяний віртуальний механізм.
//
// Варіант 8.
//Описати клас «Склад», у якому передбачити поле з номером, динамічний
//масив об’єктів типу «Товар» та розмірністю цього масиву.
//Передбачити конструктори, деструктор і усі функції, які вважаєте за
//доцільне. Обовязково визначити оператор індексації для доступу до інформації
//про товар. Для одного з похідних класів передбачити можливість перетворення
//типу до об’єкту базового і навпаки.
//Функцію з виведенням скороченої інформації у класах «Товар» та усіх
//похідних переробити на віртуальну.
public class Main {

    public static void main(String[] args) {
        // -----------------------------------------
        ShopItem baseShopItem = new ShopItem("base shop item", BigDecimal.valueOf(0.1d), 10);
        ShopItem industrialItem = new IndustrialItem("industrial item", BigDecimal.valueOf(12.3d), 10, DO_NOT_CANT, IN_SELLING_ROOM);
        // -----------------------------------------
        System.out.println("-------------");
        System.out.println("ShopItem       alarm " + baseShopItem.alarm());
        System.out.println("IndustrialItem alarm " + industrialItem.alarm());
    }
}

